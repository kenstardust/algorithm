import numpy as np
from scipy.optimize import minimize

#定义目标函数
#注意：minimize为最小化目标函数，且约束条件中默认为大于等于约束。
def objective(x):
    return x[0]**2 + x[1]**2 + x[2]**2 + 8
#定义约束条件
def const1(x):
    return x[0]**2 - x[1] + x[2]**2 #不等式
def const2(x):
    return -(x[0] + x[1]**2 + x[2]**2 -20) #不等约束
def const3(x):
    return -x[0] - x[1]**2 + 2#等式约束
def const4(x):
    return x[1] + 2*x[2]**2 - 3 #等式约束

#每一个约束为一个字典，其中 type 表示约束类型：ineq为大于等于，eq为等于；
#fun 表示约束函数表达式，即step2中的自定义函数
con1 = {'type':'ineq','fun':const1}
con2 = {'type':'ineq','fun':const2}
con3 = {'type':'eq','fun':const3}
con4 = {'type':'eq','fun':const4}

#4个约束条件
cons=([con1,con2,con3,con4])

#决策变量的符号约束
b=(-1,None)
bnds = (b,b,b)

x0=np.array([0,0,0])#定义初始值
solution = minimize(objective, x0,method='SLSQP',bounds=bnds,constraints=cons)
x=solution.x

print('目标值: ' + str(objective(x)))
print('最优解为')
print('x1 = ' + str(round(x[0],3)))#round()保留小数几位
print('x2 = ' + str(round(x[1],3)))
print('x3 = ' + str(round(x[2],3)))

print(solution)
