import numpy as np
from pymoo.core.problem import ElementwiseProblem

class MyProblem(ElementwiseProblem):

    def __init__(self):
        super().__init__(n_var=22,
                         n_obj=3,
                         n_constr=3,
                         #农业 工业 住宅 发电
                         xl=np.array([0.01,      0.05,  0.787305, 0.09,
                                      0.002,     0.02,  0.1,      0.054,
                                      0.006,     0.03,  0.06,     0.014,
                                      0.005,     0.03,  0.01,     0.009,
                                      0.001,     0.03,  0.028,    0.001,
                                      14.312365, 3.3572378]),
                         xu=np.array([0.09 ,      0.1 , 1.487305 ,0.9,
                                      0.018 ,     0.1 , 0.2,      0.126,
                                      0.048 ,     0.1 , 0.12,     0.032,
                                      0.045 ,     0.1 , 0.02,     0.021,
                                      0.009 ,     0.1 , 0.056,    0.03,
                                      30.6711182, 20.8143233]))

    def _evaluate(self, x, out, *args, **kwargs):
        #农业 工业 住宅 发电
        k=[56.16, 356.46, 2.372, 4.812,
           3.9, 30.77, 0.239, 0.054,
           4.12, 23.7, 0.179,0.047,
           1.11, 3.07, 0.032,0.004,
           2.08, 4.6, 2.8, 0.052, 0.017,
           0.5, 0.5]
        k1=[200, 300, 150, 100]
        t=0
        for i in range(0,22):
            t += -k[i]*x[i]
        f1 =t
        f2 = -x[20]-x[21]
        f3 = k1[0]*(x[0]+x[4]+x[8]+x[12]+x[16])+\
                k1[1]*(x[1]+x[5]+x[9]+x[13]+x[17])+\
                    k1[2]*(x[2]+x[6]+x[10]+x[14]+x[18])+\
                        k1[3]*(x[3]+x[7]+x[11]+x[15]+x[19])
        
        g1 = 2*(x[20]+x[21] - 23) / 0.18
        #g2 = 20*( x[2] + x[6] +x[10] + x[14] + x[18] - 4000000) / 4.8
        g3 = 0
        for i in range(0,22):
            g3+=x[i] 
        #g3 = g3 - 14.6711182 - 7.8143233 - 0.0195926 - 0.005 #1
                                                             #2
        g3 = (g3 - 14.671249 -  7.814438363 - 1.165848495 -0.321408371)                                              #3
                                                             
        #米德湖 鲍威尔湖 米德湖流入量 鲍威尔流入量
        
        out["F"] = [f1, f2,f3]
        out["G"] = [g1, g3]#,g3]


problem = MyProblem()

from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.factory import get_sampling, get_crossover, get_mutation

algorithm = NSGA2(
    pop_size=40,
    n_offsprings=10,
    sampling=get_sampling("real_random"),
    crossover=get_crossover("real_sbx", prob=2, eta=15),
    mutation=get_mutation("real_pm", eta=20),
    eliminate_duplicates=True
)

from pymoo.factory import get_termination

termination = get_termination("n_gen", 40)

from pymoo.optimize import minimize

res = minimize(problem,
               algorithm,
               termination,
               seed=1,
               save_history=True,
               verbose=True)

X = res.X
F = res.F

print("每行农业用水 工业用水 住宅用水 发电用水")
print(X)
print("目标函数最优值\n f1:利益最优 f2:水库蓄水最优 f3: 污染最小最优")
print(F)

import matplotlib.pyplot as plt
xl, xu = problem.bounds()
plt.figure(figsize=(7, 5))
plt.scatter(X[:, 0], X[:, 1], s=30, facecolors='none', edgecolors='r')
plt.xlim(None, None)
plt.ylim(None, None)
plt.title("Design Space")
plt.show()

#plt.figure(figsize=(7, 5))
#plt.scatter(F[:, 0], F[:, 1], s=30, facecolors='none', edgecolors='blue')
#plt.title("Objective Space1")
#plt.show()

F = res.F
xl, xu = problem.bounds()
plt.figure(figsize=(7, 5))
plt.scatter(F[:, 0], F[:, 1], s=30, facecolors='none', edgecolors='blue')
plt.title("Objective Space")
plt.show()
